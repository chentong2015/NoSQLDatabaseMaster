Windows: Redis Desktop Manager GUI
Ubuntu Cloud Server
   Login: root, TCHong16@
   Server IP: 8.209.74.47 外网 / ip addr show 172.25.8.130 内网
   主存放目录/home/redis/

Redis性能调优：配置redis.conf文件

搭建单体模式Redis Server
   1. > tar -zxvf redis-3.0.0-rc.tar.gz 下载Redis package并解压
   2. > apt install gcc                 安装gcc, 编译redis源码(C++) / Linux Sever Cloud自带gcc
   3. > make                            进入解压的目录，使用gcc进行编译
   4. > cd redis-3.0.0-rc/src           验证目录下面是否生成redis-server和redis-cli
   5. > vim redis.conf                  配置配置文件
            port 6379                   保持默认端口号 ===> 必须开启云服务器的安全组设置，允许外网访问Redis 6379端口
            daemonize yes               表示在后台启动
            protected-mode no           取消保护模式，意味着外网无需身份认证即可登录
                                        配置登录身份的认证 # requirepass foobared
            # bind 127.0.0.1            redis则会监听本服务器所有的IP，这样外网和本机就都可以使用redis服务
   6. > /src/redis-server redis.conf 使用配置文件启动
   7. > ps -ef | grep redis          检测redis进程是否启动成功
             root      7057     1  0 Aug13 ?        00:00:02 src/redis-server *:6379
      > netstat -tunpl | grep 6379   查看是否有redis服务或者查看端口(默认的端口是6379)
   8. > /src/redis-cli               使用Redis Client Interface
      > keys * 查看是否为空
      > quit / exit 退出客户端
   9. > pkill redis-server 退出redis服务
      > kill  进程号
      > /src/redis-cli shutdown

一个服务器上搭建伪分布式Redis集群
   1. > mkdir /home/redis/redis-cluster 创建6个目录
      > mkdir 8001, 8002 ...
   2. 把/home/redis/redis-6.2.5下面的redis.conf复制到8001下, 对每一个redis配置文件设置如下
      port 8001                           设置机器的端口号(对应不同的redis服务)    ===> 必须开启安全组设置(自定义添加0-65535端口号)
      daemonize yes
      bind 172.25.8.130                   只能使用本机的IP地址用于定位redis集群机器，使用外网IP则无法启动
      dir /home/redis/redis-cluster/8001  指定数据存放的位置，避免丢失
      cluster-enabled yes                 启用集群模式 [cluster]
      cluster-config-file nodes-8001.conf 设置配置文件的名称一致性
      cluster-node-timeout 5000           通讯的超时，5s中没有反映，则退出集群
      appendonly yes                      开启日志文件
   3. 配置每一个Redis Sever的配置文件
      :%s/源字符串/目的字符串/g              批量替换文件中数据
      :x 保存并退出
   4. 分别启动6个redis实例
      > /src/redis-server /home/redis/redis-cluster/8001/redis-8001.conf 使用不同配置文件来启动不同Redis实例
      > ps -ef | grep redis 查看启动的实例
          root@CTONG:/home/redis# ps -ef | grep redis
          root     14491     1  0 00:08 ?        00:00:00 redis-6.2.5/src/redis-server 127.0.0.1:8001 [cluster]
          root     14507     1  0 00:08 ?        00:00:00 redis-6.2.5/src/redis-server 127.0.0.1:8002 [cluster]
          ...
   5. 安装redis集群需要使用ruby命令
      > apt install ruby
      > apt install rubygems
      > gem install redis --version 3.0.0(安装Redis和ruby接口)
          root@CTONG:/home/redis# gem install redis  ===> 实际操作使用默认的安装版本4.4.0
             Fetching: redis-4.4.0.gem (100%)
             Successfully installed redis-4.4.0
             Parsing documentation for redis-4.4.0
             Installing ri documentation for redis-4.4.0
             Done installing documentation for redis after 0 seconds
             1 gem installed
   6. 创建整个集群(执行ruby脚本)
      参数1表示Master/Slave结点的比值
      主从规定：前面是主，后面是从，"主结点顺序"对应"从结点位置顺序"
      redis-cli --cluster SUBCOMMAND [ARGUMENTS] [OPTIONS]
      redis-cli --cluster create 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003 127.0.0.1:8004 127.0.0.1:8005 127.0.0.1:8006 --cluster-replicas 1
   7. 测试集群
      >/src/redis-cli -c -h -p 连接任意一个客户端即可, c表示集群模式，-host, -port
      >/src/redis-cli -c -h 127.0.0.1 -p 8001
      >cluster info  验证集群状态
      >cluster nodes 验证结点
      127.0.0.1:8001> set name chentong
           -> Redirected to slot [5798] located at 127.0.0.1:8002  数据操作验证/集群内部会重定向到不同的master机器上执行
           OK
   8. 测试集群模式下的"主从替代"
      >/src/redis-cli -c -h 127.0.0.1 -p 8001 shutdown 关闭集群中的一个Master结点，检测它的"从结点"会自动替代该挂掉的Master结点 !!
      >/src/redis-cli -c -h 127.0.0.1 -p 8002 连接8002
      >cluster nodes
        8001 master; fail <- 8004自动顶上来


	   

