TODO: Redis K-V底层(C语言)实现原理 -> 基于数组和链表来实现
1. 内存中一张巨大的hash表，依赖于hash function，查询的效率很高，接近O(1)
   全局hash表
      arr[0] => key: 都是String类型 --> 对应到C语言SDS类型
      arr[0] -> (k1, v1, next->null) 数组存指针，指向具体的键值对元素
      arr[1] -> (k3, v3, next-> k2),(k2, v2, next->null) 如果key一样则先删除再设置，反之挂链表
      arr[2]    如果这里挂的链表过长，可能会rehash
      arr[3] => 对于不同的value值, 对应着特定的存储结构

2. hash运算: hash(key) % table_size  计算数组存放的位置，散列避免hash冲突
            hash(key)自然数 % framework = index 将字符串转换成整型值

3. hash冲突: 渐进式rehash以及动态扩容机制，减少hash冲突
   - 任意相同的输入，一定有相同的冲突
   - 不同的输入，有可能有相同输出
     hash(k1) % 4 = 0
     hash(k2) % 4 = 1
     hash(k3) % 4 = 1

